/* Actors */
clock : misc.Clock(period=0.05)
outer : control.PIDClock(td=1.0, ti=5.0, tr=10.0, kp=-0.2, kd=-0.2, n=10.0, beta=1.0, period=0.05, max_q=1000)
inner : control.PIDClock(tr=1.0, kp=1.0, beta=1.0, period=0.05, max_q=1000)

act : io.SimWriter(device="/bbsim_in-0")
ang : io.SimReader(device="/bbsim_out1-0", scale=0.785, noise=0.)
pos : io.SimReader(device="/bbsim_out2-0", scale=0.55, noise=0.)

dis : misc.PacedValueIterator( period=5.0, values=[0.0, 5.0])

posdelay : std.Delay(delay_data="/tmp/delay_data.txt")
angdelay : std.Delay(delay_data="/tmp/delay_data.txt")
actdelay : std.Delay(delay_data="/tmp/delay_data.txt")

/* Connections */
clock.tick > ang.tick, pos.tick, dis.tick
pos.value > posdelay.token
posdelay.token > outer.y
ang.value > angdelay.token
angdelay.token > inner.y
outer.v > inner.y_ref
inner.v >  actdelay.token
actdelay.token > act.value
act.delay_outer > outer.measured_delay /* Insert go through delay actor */
act.delay_inner > inner.measured_delay
dis.value > outer.y_ref

/* Port Properties */
posdelay.tick[in](queue_length=100)
posdelay.token[in](queue_length=100)
angdelay.tick[in](queue_length=100)
angdelay.token[in](queue_length=100)
actdelay.tick[in](queue_length=100)
actdelay.token[in](queue_length=100)
posdelay.token[out](queue_length=100)
angdelay.token[out](queue_length=100)
actdelay.token[out](queue_length=100)
ang.value[out](queue_length=100)
pos.value[out](queue_length=100)
act.value[in](queue_length=100)
outer.y[in](queue_length=100)
outer.v[out](queue_length=100)
inner.y[in](queue_length=100)
act.value[in](queue_length=100)

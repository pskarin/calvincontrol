/* Actors */
clock : misc.Clock(period=0.05)
outer : control.PIDClock(td=1.0, ti=5.0, tr=10.0, kp=-0.2, kd=-0.2, n=10.0, beta=1.0, period=0.05, max_q=1000, name="Outer", estimate=1, log_data=1, log_file="/tmp/log_outer.txt")
inner : control.PIDClock(tr=1.0, kp=1.0, beta=1.0, period=0.05, max_q=1000, name="Inner", estimate=1, log_data=1, log_file="/tmp/log_inner.txt")
act : io.SimWriter(device="/bbsim_in-0", log_data=1)
ang : io.SimReader(device="/bbsim_out1-0", scale=0.785, noise=0., log_data=1, log_file="/tmp/log_ang.txt")
pos : io.SimReader(device="/bbsim_out2-0", scale=0.55, noise=0., log_data=1, log_file="/tmp/log_pos.txt")

dis : misc.PacedValueIterator( period=5.0, values=[0.0, 5.0])

/* For constant delays, 0.075 is a good value to consider */

posdelay : std.Delay(delay_data="/tmp/delay_data.txt", name_serial=1)
angdelay : std.Delay(delay_data="/tmp/delay_data.txt", name_serial=2)
actdelay : std.Delay(delay_data="/tmp/delay_data.txt", name_serial=3)
delayouter: std.Delay(delay_data="/tmp/delay_data.txt", name_serial=4)
delayinner: std.Delay(delay_data="/tmp/delay_data.txt", name_serial=5)

/* Connections */
clock.tick > ang.tick, pos.tick, dis.tick
pos.value > posdelay.token
posdelay.token > outer.y
ang.value > angdelay.token
angdelay.token > inner.y
outer.v > inner.y_ref
inner.v >  actdelay.token
actdelay.token > act.value
act.delay_outer > delayouter.token
delayouter.token > outer.measured_delay /* Insert go through delay actor */
act.delay_inner > delayinner.token
delayinner.token > inner.measured_delay
dis.value > outer.y_ref

